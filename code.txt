Here are the steps to execute and deploy this healthcare database application with security:

1. Setup MongoDB Atlas cloud database
- Create a free tier cluster
- Add database user and get connection string

2. Install dependencies
- Flask, flask-jwt-extended, pymongo, bcrypt etc

3. Configure environment variables
- Create a .env file with:
MONGO_URI=mongodb+srv://<username>:<password>@cluster0.xyz.mongodb.net/healthdb?retryWrites=true&w=majority
JWT_SECRET=yoursecurekey 

4. Run the app locally
- python app.py
- Test register and login APIs via Postman

5. Deploy on AWS Elastic Beanstalk
- Create EB environment 
- Select Flask app 
- Upload source code
- Add environment properties
- Deploy!

6. Deploy on Azure App Service
- Create Web App resource
- Configure environment variables
- Deploy code from Github
- Enable HTTPS 

7. Access the APIs
- Register users
- Login to get JWT token
- Access patient APIs by passing token

That's a high level overview of how to get the application running locally and deployed to the cloud. Let me know if you need help with any specific step!


code:

Here is some sample code to build a healthcare database management application with security and validation that can be deployed on AWS or Azure:

```python
# Import libraries
import os
from datetime import datetime  
import bcrypt
import pymongo
from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, create_access_token

# Initialize app
app = Flask(__name__)
app.config['MONGO_URI'] = os.environ['MONGO_URI'] # MongoDB connection string
mongo = PyMongo(app)

# Config JWT 
app.config['JWT_SECRET_KEY'] = os.environ['JWT_SECRET']  
jwt = JWTManager(app)

# Database collections
users = mongo.db.users
patients = mongo.db.patients 

# Password encryption
def encrypt_password(password):
   return bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())

# JWT required decorator
def token_required(f):
   @wraps(f) 
   def wrapper(*args, **kwargs):
       token = request.args.get('token') 
       try:
           jwt.decode(token, app.config['JWT_SECRET_KEY'])
           return f(*args, **kwargs)
       except:
           return jsonify({'error': 'Invalid token'}), 401
   return wrapper
   
# Register new user
@app.route('/users', methods=['POST'])
def register_user():
   username = request.get_json()['username']
   password = request.get_json()['password']
   
   # Validate if user exists
   if users.find_one({"username": username}):
       return jsonify({"error": "Username already exists"})
       
   # Encrypt and save password
   encrypted_password = encrypt_password(password)
   users.insert_one({
       "username": username,
       "password": encrypted_password 
   })
   
   return jsonify({"message": "Registration successful"})
   
 # Login user   
@app.route('/login', methods=['POST'])
def login_user():
   username = request.get_json()['username']
   password = request.get_json()['password']
   
   user = users.find_one({"username": username})
   
   # Validate password
   if user and bcrypt.checkpw(password.encode('utf8'), user['password']): 
      access_token = create_access_token(identity=username)  
      return jsonify(access_token=access_token)
   else:
      return jsonify({"error": "Invalid credentials"})
      
# Patient CRUD routes below
      
@app.route('/patients', methods=['POST'])  
@token_required
def add_patient():
   # Access JWT identity
   current_user = get_jwt_identity() 
   # Validate user is doctor 
   if current_user['role'] != 'doctor':
      return jsonify({"error": "Unauthorized"})  

   # Add patient logic
   name = request.get_json()['name']
   # etc
   
   return jsonify({"message": "Patient added"})

if __name__ == '__main__':
    app.run() 
```

Key points:

- Use MongoDB Atlas for cloud database
- Password encryption using bcrypt 
- JWT authentication for security 
- Validating user roles for access control
- Deploy app on AWS Elastic Beanstalk or Azure App Service

This covers the basics for building a secure healthcare app for the cloud. Let me know if you need any other details!